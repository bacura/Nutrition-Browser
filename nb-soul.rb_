#fct soul 0.00

#==============================================================================
#CHANGE LOG
#==============================================================================
#20170927, 0.00, generated


#==============================================================================
#LIBRARY
#==============================================================================
require 'cgi'
require 'mysql2'
require 'bigdecimal'


#==============================================================================
#STATIC
#==============================================================================
$MYSQL_HOST = 'localhost'
$MYSQL_USER = ''
$MYSQL_PW = ''
$MYSQL_DB = 'nutrition'
$MYSQL_TB_FCT = 'fct'
$MYSQL_TB_FCTP = 'fctp'
$MYSQL_TB_CFG = 'cfg'
$MYSQL_TB_TAG = 'tag'
$MYSQL_TB_EXT = 'ext'
$MYSQL_TB_DIC = 'dic'
$MYSQL_TB_SLOGF = 'slogf'
$MYSQL_TB_SLOGR = 'slogr'
$MYSQL_TB_USER = 'user'
$MYSQL_TB_RECIPE = 'recipe'
$MYSQL_TB_RECIPEI = 'recipei'
$MYSQL_TB_RECIPEIF = 'recipeif'
$MYSQL_TB_PRICE = 'price'
$MYSQL_TB_PRICEM = 'pricem'
$MYSQL_TB_SUM = 'sum'
$MYSQL_TB_HIS = 'his'
$MYSQL_TB_PALETTE = 'palette'
$MYSQL_TB_MEAL = 'meal'
$MYSQL_TB_MENU = 'menu'
$MYSQL_TB_MEMORY = 'memory'
$MYSQL_TB_KOYOMI = 'koyomi'
$MYSQL_TB_KOYOMIEX = 'koyomiex'
$MYSQL_TB_FCS = 'fcs'
$MYSQL_TB_FCZ = 'fcz'

$DEBUG = false

$GM = ''

#### 注意！！
$HTDOCS_PATH = ''

$PHOTO_PATH = "#{$HTDOCS_PATH}/photo"
$PHOTO_PATH_TMP = "#{$HTDOCS_PATH}/photo_"

$JS_PATH = 'js'
$CSS_PATH = 'css'
$BOOK_PATH = 'books'

$CATEGORY = ['特殊', '穀類', 'いも及びでん粉類', '砂糖及び甘味類', '豆類', '種実類', '野菜類', '果実類', 'きのこ類', '藻類', '魚介類', '肉類', '卵類', '乳類', '油脂類', '菓子類', 'し好飲料類', '調味料及び香辛料類', '調理加工食品類']

#             0               1                 2                 3                     4                   5                               6                     7               8                    9                                  10              11                              12                    13                          14                         15                     16                 17                                     18                         19                         20                      21            22               23               24              25                26        27                28            29          30              31             32            33            34               35                  36                  37                    38                         39                         40                            41                42                        43                      44                        45                        46                47                    48                49                50                    51                    52             53                     54                55                56                      57               58                     59                   60                  61             62                          63                64              65            66                    67
$FCT_ITEM = ['FG',          'FN',             'SID',            'Tagnames',           'REFUSE',          'ENERC_KCAL',                    'ENERC',                'WATER',        'PROT',             'PROTCAA',                          'FAT',         'FATNLEA',                       'FASAT',              'FAMS',                    'FAPU',                    'CHOLE',               'CHO',             'CHOAVLM',                             'FIBSOL',                  'FIBINS',                  'FIBTG',                'ASH',         'NA',            'K',           'CA',            'MG',              'P',       'FE',             'ZN',         'CU',       'MN',          'ID',          'SE',         'CR',         'MO',            'RETOL',            'CARTA',             'CARTB',            'CRYPXB',                   'CARTBEQ',                'VITA_RAE',                    'VITD',           'TOCPHA',                 'TOCPHB',                'TOCPHG',                'TOCPHD',                 'VITK',           'THIAHCL',            'RIBF',            'NIA',            'VITB6A',            'VITB12',              'FOL',        'PANTAC',              'BIOT',           'VITC',           'NACL_EQ',              'ALC',            'NITRA',             'THEBRN',             'CAFFN',            'TAN',          'POLYPHENT',              'ACEAC',         'COIL',           'OA',          'WCR',               'Notice']
$FCT_NAME = {'FG'=>'食品群', 'FN'=>'食品番号', 'SID'=>'索引番号', 'Tagnames'=>'食品名', 'REFUSE'=>'廃棄率', 'ENERC_KCAL'=>'エネルギー(kcal)', 'ENERC'=>'エネルギー(kJ)', 'WATER'=>'水分', 'PROT'=>'たんぱく質', 'PROTCAA'=>'アミノ酸組成によるたんぱく質', 'FAT'=>'脂質', 'FATNLEA'=>'トリアシルグリセロール当量','FASAT'=>'飽和脂肪酸', 'FAMS'=>'一価不飽和脂肪酸', 'FAPU'=>'多価不飽和脂肪酸', 'CHOLE'=>'コレステロール', 'CHO'=>'炭水化物', 'CHOAVLM'=>'利用可能炭水化物(単糖当量)', 'FIBSOL'=>'水溶性食物繊維', 'FIBINS'=>'不溶性食物繊維', 'FIBTG'=>'食物繊維総量', 'ASH'=>'灰分', 'NA'=>'ナトリウム', 'K'=>'カリウム', 'CA'=>'カルシウム', 'MG'=>'マグネシウム', 'P'=>'リン', 'FE'=>'鉄',       'ZN'=>'亜鉛', 'CU'=>'銅', 'MN'=>'マンガン', 'ID'=>'ヨウ素', 'SE'=>'セレン', 'CR'=>'クロム', 'MO'=>'モリブデン', 'RETOL'=>'レチノール', 'CARTA'=>'α-カロテン', 'CARTB'=>'β-カロテン', 'CRYPXB'=>'β-クリプトキサンチン', 'CARTBEQ'=>'β-カロテン当量', 'VITA_RAE'=>'レチノール活性当量', 'VITD'=>'ビタミンD', 'TOCPHA'=>'α-トコフェロール', 'TOCPHB'=>'β-トコフェロール', 'TOCPHG'=>'γ-トコフェロール', 'TOCPHD'=>'δ-トコフェロール', 'VITK'=>'ビタミンK', 'THIAHCL'=>'ビタミンB1', 'RIBF'=>'ビタミンB2', 'NIA'=>'ナイアシン', 'VITB6A'=>'ビタミンB6', 'VITB12'=>'ビタミンB12', 'FOL'=>'葉酸', 'PANTAC'=>'パントテン酸', 'BIOT'=>'ビオチン', 'VITC'=>'ビタミンC', 'NACL_EQ'=>'食塩相当量', 'ALC'=>'アルコール', 'NITRA'=>'硝酸イオン', 'THEBRN'=>'テオブロミン', 'CAFFN'=>'カフェイン', 'TAN'=>'タンニン', 'POLYPHENT'=>'ポリフェノール', 'ACEAC'=>'酢酸', 'COIL'=>'調理油', 'OA'=>'有機酸', 'WCR'=>'重量変化率', 'Notice'=>'備考'}
$FCT_UNIT = {'FG'=>nil,     'FN'=>nil,        'SID'=>nil,       'Tagnames'=>nil,      'REFUSE'=>'%',     'ENERC_KCAL'=>'kcal',             'ENERC'=>'kJ',         'WATER'=>'g',   'PROT'=>'g',        'PROTCAA'=>'g',                     'FAT'=>'g',   'FATNLEA'=>'g',                   'FASAT'=>'g',         'FAMS'=>'g',               'FAPU'=>'g',               'CHOLE'=>'mg',         'CHO'=>'g',        'CHOAVLM'=>'g',                        'FIBSOL'=>'g',             'FIBINS'=>'g',             'FIBTG'=>'g',           'ASH'=>'g',    'NA'=>'mg',      'K'=>'mg',     'CA'=>'mg',      'MG'=>'mg',        'P'=>'mg', 'FE'=>'mg',       'ZN'=>'mg',   'CU'=>'mg', 'MN'=>'mg',     'ID'=>'μg',   'SE'=>'μg',    'CR'=>'μg',   'MO'=>'μg',      'RETOL'=>'μg',      'CARTA'=>'μg',      'CARTB'=>'μg',       'CRYPXB'=>'μg',             'CARTBEQ'=>'μg',          'VITA_RAE'=>'μg',              'VITD'=>'μg',     'TOCPHA'=>'mg',           'TOCPHB'=>'mg',          'TOCPHG'=>'mg',          'TOCPHD'=>'mg',           'VITK'=>'μg',     'THIAHCL'=>'mg',      'RIBF'=>'mg',      'NIA'=>'mg',      'VITB6A'=>'mg',      'VITB12'=>'mg',       'FOL'=>'μg',   'PANTAC'=>'mg',        'BIOT'=>'μg',     'VITC'=>'mg',     'NACL_EQ'=>'g',         'ALC'=>'g',       'NITRA'=>'g',        'THEBRN'=>'g',        'CAFFN'=>'g',       'TAN'=>'g',     'POLYPHENT'=>'g',         'ACEAC'=>'g',    'COIL'=>'g',      'OA'=>'g',     'WCR'=>'%',          'Notice'=>nil}
$FCT_FRCT = {'FG'=>nil,     'FN'=>nil,        'SID'=>nil,       'Tagnames'=>nil,      'REFUSE'=>nil,     'ENERC_KCAL'=>0,                  'ENERC'=>0,            'WATER'=>1,     'PROT'=>1,          'PROTCAA'=>1,                       'FAT'=>1,      'FATNLEA'=>1,                    'FASAT'=>2,           'FAMS'=>2,                 'FAPU'=>2,                 'CHOLE'=>0,            'CHO'=>1,          'CHOAVLM'=>1,                          'FIBSOL'=>1,               'FIBINS'=>1,               'FIBTG'=>1,             'ASH'=>1,      'NA'=>0,         'K'=>0,        'CA'=>0,         'MG'=>0,           'P'=>0,    'FE'=>1,          'ZN'=>1,      'CU'=>2,    'MN'=>2,        'ID'=>0,      'SE'=>0,       'CR'=>0,      'MO'=>0,         'RETOL'=>0,         'CARTA'=>0,         'CARTB'=>0,          'CRYPXB'=>0,                'CARTBEQ'=>0,              'VITA_RAE'=>0,                'VITD'=>1,        'TOCPHA'=>1,              'TOCPHB'=>1,             'TOCPHG'=>1,             'TOCPHD'=>1,              'VITK'=>0,        'THIAHCL'=>2,         'RIBF'=>2,         'NIA'=>1,         'VITB6A'=>2,         'VITB12'=>1,          'FOL'=>0,      'PANTAC'=>2,           'BIOT'=>1,        'VITC'=>0,        'NACL_EQ'=>1,           'ALC'=>1,         'NITRA'=>1,          'THEBRN'=>1,          'CAFFN'=>2,         'TAN'=>2,       'POLYPHENT'=>1,           'ACEAC'=>1,      'COIL'=>1,        'OA'=>1,       'WCR'=>nil,          'Notice'=>nil}

$RECIPE_TYPE = ['未設定','和食','洋食','中華','イタリアン','フレンチ','エスニック']
$RECIPE_ROLE = ['未設定','主食','主菜','副菜','汁物','デザート・おやつ','飲み物','調味料']
$RECIPE_TECH = ['未設定','茹でる・煮る・炊く','直火・炙る','炒める・ソテー','蒸す','揚げる','和える','生・非加熱','冷蔵・冷凍','オーブン・グリル','電子レンジ']
$RECIPE_TIME = ['未設定','～5','～10','～15','～20','～30','～45','～60','～120']
$RECIPE_COST = ['未設定','50円未満','100円未満','150円未満','200円未満','300円未満','400円未満','500円未満','600円未満','800円未満','1000円未満', '1000円以上']

#         0     1    2    3       4       5     6     7       8     9       10    11    12    13    14     15
$UNIT = ['g','kcal','ml','小さじ','大さじ','カップ','合','切身S','切身M','切身L','個S','個M','個L','SV', '単位', '廃棄前']

#              0    1           2         3     4       5
$SUB_GROUP = ['','緑黄色野菜','普通牛乳','味噌','醤油','食塩']

#           0    1   2       3     4     5    6    7       8        9     10    11      12          13           14     15    16    17    18   19      20    21     22     23       24    25      26      27
$ALLERGY = ['','えび','かに','小麦','そば','卵','乳','落花生','あわび','いか','いくら','オレンジ','カシューナッツ','キウイフルーツ','牛肉','くるみ','ごま','さけ','さば','大豆','鶏肉','バナナ','豚肉','まつたけ','もも','やまいも','りんご','ゼラチン']

#          0        1     2      3      4    5    6    7    8    9   10   11
$COLOR = ['未指定','赤','ピンク','オレンジ','黄','緑','青','紫','茶','白','黒','透明']

#           0      1      2       3        4           5         6    7   8       9
$ACCOUNT = ['退会','一般','ギルメン','guest', 'ギルメン・萌','ギルメン・旬','-','-','サブマス','ギルマス']

#           0           1       2       3       4     5         6       7         8
$KEX_ITEM = ['未設定', '独自→', '身長', '体重', 'BMI', '体脂肪率', '腹囲', '首回り', '骨盤上部周囲']
$KEX_UNIT = ['',       ''   , 'cm',   'kg',  '',     '%',       'cm',  'cm',    'cm']

$SOMETHING = {'?--'=>'何か食べた（微盛）', '?-'=>'何か食べた（小盛）', '?='=>'何か食べた（並盛）', '?+'=>'何か食べた（大盛）', '?++'=>'何か食べた（特盛）'}

$TIME_NOW = Time.now
$DATETIME = $TIME_NOW.strftime("%Y-%m-%d %H:%M:%S")

$HISTORY_LIMIT = 200

$DEFAULT_LP = 'jp'
$LP = [nil]

#==============================================================================
#DEFINITION
#==============================================================================

#### Language init
def lp_init( script, language_set )
  f = open( "#{$HTDOCS_PATH}/language_/#{script}.#{language_set}", "r" )
  f.each do |line|
    $LP << line.chomp.force_encoding( 'UTF-8' )
  end
  f.close

  return $LP
end


#### HTML init
def html_init( cookie )
  puts "Content-type: text/html\n"
  puts "Cache-Control: no-store, no-cache, must-revalidate, max-age=0\n"
  puts "Cache-Control: post-check=0, pre-check=0, false\n"
  puts "Pragma: no-cache\n"
  puts cookie unless cookie == nil
  puts "\n"
end


#### HTML header
def html_head( interrupt, status, sub_title )
  refresh = ''
  refresh = '<meta http-equiv="refresh" content="0; url=index.cgi">' if interrupt == 'refresh'

  js_guild = ''
  js_guild = "<script type='text/javascript' src='#{$JS_PATH}/guild.js'></script>" if status >= 3

  js_master = ''
  js_master = "<script type='text/javascript' src='#{$JS_PATH}/master.js'></script>" if status >= 8

  html = <<-"HTML"
<!DOCTYPE html>
<head>
  #{refresh}
  <title>栄養ブラウザ #{sub_title}</title>
  <meta charset="UTF-8">
  <meta name="keywords" content="栄養,nutrition, Nutritionist, food,検索,計算,解析,評価">
  <meta name="description" content="食品成分表の検索,栄養計算,栄養評価, analysis, calculation">
  <meta name="robots" content="index,follow">
  <meta name="author" content="Shinji Yoshiyama">
  <!-- bootstrap -->
  <link rel="stylesheet" href="bootstrap-dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="#{$CSS_PATH}/core.css">

<!-- Jquery -->
  <script type="text/javascript" src="./jquery-3.2.1.min.js"></script>
<!-- bootstrap -->
  <script type="text/javascript" src="bootstrap-dist/js/bootstrap.min.js"></script>
  <script type="text/javascript" src="#{$JS_PATH}/core.js"></script>
  <script type='text/javascript' src='#{$JS_PATH}/recipe.js'></script>
  <script type='text/javascript' src='#{$JS_PATH}/menu.js'></script>
  <script type='text/javascript' src='#{$JS_PATH}/config.js'></script>
  #{js_guild}
  #{js_master}
</head>

<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//bacura.jp/piwik/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '5']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->

<body class="body">
  <span class="world_frame" id="world_frame">
HTML

  puts html
end


#### HTML top
def html_top( user_name, status, aliasu )
  case status
  when 1
    login_color = "primary"
  when 3
    login_color = "warning"
  when 2, 4
    login_color = "info"
  when 5
    login_color = "success"
  when 8, 9
    login_color = "danger"
  else
    login_color = "secondary"
  end


  user_name =  aliasu if aliasu != '' && aliasu != nil
  login = "#{user_name}&nbsp;さん&nbsp;|&nbsp;<a href=\"login.cgi?mode=logout\" class=\"text-#{login_color}\">ログアウト</a>"
  login = "<a href='login.cgi' class=\"text-#{login_color}\">ログイン</a>&nbsp;|&nbsp;<a href=\"regist.cgi\" class=\"text-#{login_color}\">登録</a>" if user_name == nil

  html = <<-"HTML"
      <header class="navbar navbar-dark bg-dark" id="header">
        <h4><a href="index.cgi" class="text-#{login_color}">栄養ブラウザ</a></h4>
        <span class="text-#{login_color} login_msg"><h5>#{login}</h5></span>
        <a href='http://neg.bacura.jp/?p=523' target='manual'><span class="text-#{login_color} login_msg"><h5>手引き</h5></span></a>
        <span class="form-inline form-inline-sm">
          <div class="input-group mb-3">
            <div class="input-group-prepend">
              <select class="form-control form-control-sm" id="qcate">
                <option value='0'>食品</option>
                <option value='1'>レシピ</option>
                <option value='2'>記憶</option>
              </select>
            </div>
            <input class="form-control form-control-sm" type="text" maxlength="100" id="words" onchange="searchBWL1()">
            <div class="input-group-append">
              <button class="btn btn-outline-#{login_color} btn-sm" onclick="searchBWL1()">検索</button>
            </div>
          </div>
        </span>
      </header>
HTML

  puts html
end


#### HTML footer
def html_foot()
    html = <<-"HTML"
    <footer class="footer">
      <div align="center">
        <a href="http://neg.bacura.jp">日本えいようギルド</a>
        <a href="http://bacura.jp"><img src="http://bacura.jp/img/BKL_banner_h125.png" alt="ばきゅら京都Lab"></a>
      </div>
    </footer>
  </body>
</html>
HTML

  puts html
end


#### GETデータの抽出
def get_data()
	data = Hash.new
	if ENV['QUERY_STRING']
		querys = ENV['QUERY_STRING'].split( '&' )
		querys.each { |e|
			( k, v ) = e.split( '=' )
			data[ k ] = v
		}
	end

	return data
end


#### 旧データベース処理
def mariadb( query, html_opt )
  begin
    db = Mysql2::Client.new(:host => "#{$MYSQL_HOST}", :username => "#{$MYSQL_USER}", :password => "#{$MYSQL_PW}", :database => "#{$MYSQL_DB}", :encoding => "utf8" )
    t = query.chop
    if /\;/ =~ t
        puts "データベース処理エラーが発生しました。処理を中止します。<br>#{query}<br>"
        exit( 9 )
    end

    res = db.query( query )
    db.close
  rescue
    if html_opt
      html_init( nil )
      html_head( nil )
      html_top( nil )
    end
    puts "データベース処理エラーが発生しました。処理を中止します。<br>#{query}<br>"
  end

  return res
end


#### 新データベース処理
def mdb( query, html_opt, debug )
  begin
    db = Mysql2::Client.new(:host => "#{$MYSQL_HOST}", :username => "#{$MYSQL_USER}", :password => "#{$MYSQL_PW}", :database => "#{$MYSQL_DB}", :encoding => "utf8" )
    t = query.chop
    query_ = ''
    query_ = query if debug
    if /\;/ =~ t
        puts "データベース処理エラーが発生しました。処理を中止します。<br>#{query_}<br>"
        exit( 9 )
    end

    res = db.query( query )
    db.close
  rescue
    if html_opt
      html_init( nil )
      html_head( nil )
      html_top( nil )
    end
    puts "データベース処理エラーが発生しました。処理を中止します。<br>#{query_}<br>"
  end
  return res
end


#### ログインチェック
def login_check( cgi )
	cookie_name = cgi.cookies['NAME'].first
 	cookie_uid = cgi.cookies['UID'].first
  r = mdb( "SELECT user, status, aliasu, language FROM #{$MYSQL_TB_USER} WHERE user='#{cookie_name}' and cookie='#{cookie_uid}' and status>0;", true, true )
  if r.first
    return cookie_name, cookie_uid, r.first['status'].to_i, r.first['aliasu'], $DEFAULT_LP
  else
    return nil, nil, nil, nil, $DEFAULT_LP
  end
end


#### 食品成分値の処理
def num_opt( num, weight, mode, limit )
  # リミットがない→数値ではない場合はそのまま返す
  return num if limit == nil

  kakko = false
  if /^\(/ =~ num.to_s
    num.sub!( '(', '' )
    num.sub!( ')', '' )
    kakko = true
  end
  ans = BigDecimal( 0 )


  if num == '-'
    return '-'
  elsif num == 'Tr'
    return 'Tr'
  else
    weight = weight / 100
    #weight_f = 1 if weight_f < 0

    case mode
    # 四捨五入
    when '1'
      ans = ( BigDecimal( num ) * weight ).round( limit )
    # 切り上げ
    when '2'
      ans = ( BigDecimal( num ) * weight ).ceil( limit )
    # 切り捨て
    when '3'
      ans = ( BigDecimal( num ) * weight ).floor( limit )
    else
      ans = ( BigDecimal( num ) * weight ).round( limit )
    end
  end

  if limit == 0
    ans = ans.to_i
  else
    t = ans.to_f.to_s.split( '.' )
    l = t[1].size
    if l != limit
      d = limit - l
      d.times do t[1] << '0' end
    end
    ans = t[0] + '.' + t[1]
  end

  ans = "(#{ans})" if kakko

  return ans
end


#### 履歴追加
def add_his( user, fn )
  r = mdb( "SELECT his FROM #{$MYSQL_TB_HIS} WHERE user='#{user}';", true, $DEBUG )
  if r.first
    current_his = r.first['his'].split( "\t" )
  else
    # 新規追加
    mdb( "INSERT INTO #{$MYSQL_TB_HIS} SET user='#{user}', his='';", true, $DEBUG )
    current_his = []
  end

  #
  r = mdb( "SELECT his_max FROM #{$MYSQL_TB_CFG} WHERE user='#{user}';", false, $DEBUG )
  his_max = r.first['his_max'].to_i  if r.first
  his_max = 200 if his_max < 200 || his_max > 500

  new_his = "#{fn}\t"
  0.upto( his_max - 1 ) do |c|
    new_his << "#{current_his[c]}\t" unless fn == current_his[c]
  end
  new_his.chop!

  # 履歴の更新
  mdb( "UPDATE #{$MYSQL_TB_HIS} SET his='#{new_his}' WHERE user='#{user}';", true, $DEBUG )
end


#### レシピの新規追加
def insert_recipe( uname, food_no, food_weight )
  require 'securerandom'

  code = uname[0, 2]
  code = "x" + uname[0, 1] if code == nil
  code = "#{code}-#{SecureRandom.hex( 2 )}-#{SecureRandom.hex( 2 )}-#{SecureRandom.hex( 2 )}-#{SecureRandom.hex( 2 )}"
  sum = ''
  if food_no
      sum = "#{food_no}:#{food_weight}:g:#{food_weight}:"
  else
      sum = ''
  end
  mdb( "INSERT INTO #{$MYSQL_TB_RECIPE} SET code='#{code}', user='#{uname}',public=0, name='', type=0, role=0, tech=0, time=0, cost=0, sum='#{sum}', protocol='', fig1='', fig2='', fig3='';", false, $DEBUG )

  return code
end


#### コードの生成
def generate_code( uname, c )
  require 'securerandom'

  code = uname[0, 2]
  code = "x" + uname[0, 1] if code == nil
  code = "#{code}-#{c}-#{SecureRandom.hex( 2 )}-#{SecureRandom.hex( 2 )}-#{SecureRandom.hex( 2 )}-#{SecureRandom.hex( 2 )}"

  return code
end


#### 食品重量の決定
def food_weight_check( food_weight )
  fw = food_weight
  fw = '100' if fw == nil || fw == '' || fw == '0'
  fw.tr!( "０-９", "0-9" ) if /[０-９]/ =~ fw
  fw.sub!( '．', '.' )
  fw.sub!( '、', '.' )
  fw.sub!( ',', '.' )
  fw.sub!( '。', '.' )
  fw.sub!( '／', '/')
  fw.sub!( '＋', '+')
  uv = BigDecimal( '0' )

  # 分数処理
  if /\d+\+\d+\/\d+/ =~ fw
    # 帯分数
    a = fw.scan( /(\d+)\+\d+\/\d+/ )[0][0].to_i
    b = fw.scan( /\d+\+(\d+)\/\d+/ )[0][0].to_i
    c = fw.scan( /\d+\+\d+\/(\d+)/ )[0][0].to_i
    if c == 0
      fw = 100
      uv = 100
    else
      uv = BigDecimal( b ) / c + a
    end
  elsif /\d+\/\d+/ =~ fw
    # 仮分数
    b = fw.scan( /(\d+)\/\d+/ )[0][0].to_i
    c = fw.scan( /\d+\/(\d+)/ )[0][0].to_i
    if c == 0
      fw = 100
      uv = 100
    else
      uv = BigDecimal( b ) / c
    end
  else
    uv = BigDecimal( fw )
  end

  return fw, uv
end


#### TAG要素の結合
def bind_tags( res_tag )
    tags = res_tag.first
    sub_class = ''
    sub_class << tags['class1'].sub( '+', '' ) if /\+$/ =~ tags['class1']
    sub_class << tags['class2'].sub( '+', '' ) if /\+$/ =~ tags['class2']
    sub_class << tags['class3'].sub( '+', '' ) if /\+$/ =~ tags['class3']
    tags = "<span class='tagc'>#{sub_class}</span> #{tags['name']} <span class='tag1'>#{tags['tag1']}</span> <span class='tag2'>#{tags['tag2']}</span> <span class='tag3'>#{tags['tag3']}</span> <span class='tag4'>#{tags['tag4']}</span> <span class='tag5'>#{tags['tag5']}</span>"

    return tags
end


#### 食品番号と重さを抽出
def extract_sum( sum, dish_num, ew_mode )
  foods = sum.split( "\t" )
  food_no = []
  food_weight = []
  total_weight = 0
  foods.each do |e|
    t = e.split( ':' )
    food_no << t[0]
    if t[0] == '-'
      food_weight << '-'
    elsif t[0] == '+'
      food_weight << '+'
    elsif ew_mode == 1 && t[7] != nil && t[7] != ''
      food_weight << ( BigDecimal( t[7] ) / dish_num ).floor( 2 )
      total_weight += ( BigDecimal( t[7] ) / dish_num ).floor( 2 )
    else
      food_weight << ( BigDecimal( t[1] ) / dish_num ).floor( 2 )
      total_weight += ( BigDecimal( t[1] ) / dish_num ).floor( 2 )
    end
  end

  return food_no, food_weight, total_weight
end


#### 合計値の桁合わせ
def adjust_digit( fct_item, fct_sum, frct_mode )
  fct_item.size.times do |fi|
    limit = $FCT_FRCT[fct_item[fi]]
    if limit != nil
        case frct_mode
        # 四捨五入
        when 1
          fct_sum[fi] = fct_sum[fi].round( limit )
        # 切り上げ
        when 2
          fct_sum[fi] = fct_sum[fi].ceil( limit )
        # 切り捨て
        when 3
          fct_sum[fi] = fct_sum[fi].floor( limit )
        else
          fct_sum[fi] = fct_sum[fi].round( limit )
        end
        if limit == 0
            fct_sum[fi] = fct_sum[fi].to_i
        else
            fct_sum[fi] = fct_sum[fi].to_f
        end
    end
  end

  return fct_sum
end


#### 特殊数値変換
def convert_zero( t )
      t = 0 if t == nil
      t.to_s.sub!( '(', '' )
      t.to_s.sub!( ')', '' )
      t = 0 if t == '-'
      t = 0 if t == 'Tr'

  return t
end


#### 端数処理の設定
def frct_check( frct_mode )
  frct_mode = 1 if frct_mode == nil
  fs = []
  0.upto( 3 ) do |c|
    if frct_mode.to_i == c
      fs << 'selected'
    else
      fs << ''
    end
  end

  return frct_mode, fs
end


#### from unit volume to weight
def unit_weight( vol, uc, fn )
  r = mdb( "SELECT unitc FROM #{$MYSQL_TB_EXT} WHERE FN='#{fn}'", false, $DEBUG )
  if r.first
    if r.first['unitc']
      a = r.first['unitc'].split( ':' )
      if  a[uc.to_i] == ''
        return 0
      else
        w = ( BigDecimal( a[uc.to_i] ) * vol.to_f ).round( 1 )
        return w
      end
    end
  end

  return 0
end


#==============================================================================
# CLASS
#==============================================================================

class User
  attr_reader :name, :uid, :status, :alias, :language

  def initialize( cgi )
    @name = cgi.cookies['NAME'].first
    @uid = cgi.cookies['UID'].first

    db = Mysql2::Client.new(:host => "#{$MYSQL_HOST}", :username => "#{$MYSQL_USER}", :password => "#{$MYSQL_PW}", :database => "#{$MYSQL_DB}", :encoding => "utf8" )
    res = db.query( "SELECT * FROM #{$MYSQL_TB_USER} WHERE user='#{@name}' and cookie='#{@uid}' and status>0;" )
    db.close
    if res.first
      @status = res.first['status'].to_i
      @alias = res.first['aliasu']
      @language = $DEFAULT_LP
    else
      @name = nil
      @uid = nil
      @status = nil
      @alias = nil
      @language = $DEFAULT_LP
    end
  end

  def language( script )
    lp = [nil]
    f = open( "#{$HTDOCS_PATH}/language_/#{script}.#{@language}", "r" )
    f.each do |line| lp << line.chomp.force_encoding( 'UTF-8' ) end
    f.close

    return lp
  end

  def debug()
    puts "name:#{@name}<br>"
    puts "uid:#{@uid}<br>"
    puts "status:#{@status}<br>"
    puts "aliase:#{@aliase}<br>"
    puts "language:#{@language}<br>"
    puts "<hr>"
  end
end


####
class Calendar
  attr_reader :yyyy, :yyyyt, :yyyyf, :mm, :dd, :ddt, :ddl, :wf

  def initialize( uname, yyyy, mm, dd )
    @yyyy = yyyy
    @mm = mm
    @dd = dd
    d = Date.today
    @yyyyt = d.year
    @ddt = d.day
    d = Date.new( @yyyy, @mm, @dd ) unless @yyyy == 0
    @wf = Date.new( d.year, d.month, 1 ).wday
    @ddl = Date.new( d.year, d.month, -1 ).day

    if @yyyy == 0
      @yyyy = d.year
      @mm = d.month
      @dd = d.day
    end

    @yyyyf = $TIME_NOW.year
    db = Mysql2::Client.new(:host => "#{$MYSQL_HOST}", :username => "#{$MYSQL_USER}", :password => "#{$MYSQL_PW}", :database => "#{$MYSQL_DB}", :encoding => "utf8" )

    res = db.query( "SELECT koyomiy FROM #{$MYSQL_TB_CFG} WHERE user='#{uname}';" )
    if res.first['koyomiy']
      a = res.first['koyomiy'].split( ':' )
      @yyyyf = a[0].to_i if a[0].to_i != 0
    end
  end

  def debug()
    puts "calender.yyyy:#{@yyyy}<br>"
    puts "calender.yyyyt:#{@yyyyt}<br>"
    puts "calender.yyyyf:#{@yyyyf}<br>"
    puts "calender.mm:#{@mm}<br>"
    puts "calender.dd:#{@dd}<br>"
    puts "calender.ddt:#{@ddt}<br>"
    puts "calender.ddl:#{@ddl}<br>"
    puts "calender.wf:#{@wf}<br>"
  end
end


class Config
  attr_reader :x

  def initialize()
  end
end


class Sum
  attr_accessor :code, :name, :dish, :protect, :fn, :weight, :unit, :unitv, :check, :init, :rr, :ew

  def initialize()
    @code = nil
    @name = nil
    @dish = 1
    @protect = 0
    @fn = nil
    @weight = 0
    @unit = 0
    @unitv = 0
    @check = 0
    @init = ''
    @rr = 1.0
    @ew = 0
  end


  def load_recipe( code )
    db = Mysql2::Client.new(:host => "#{$MYSQL_HOST}", :username => "#{$MYSQL_USER}", :password => "#{$MYSQL_PW}", :database => "#{$MYSQL_DB}", :encoding => "utf8" )
    res = db.query( "SELECT code, name, sum, dish, protect from #{$MYSQL_TB_RECIPE} WHERE code='#{code}';" )
    db.close

    @code = res.first['code']
    @name = res.first['name']
    @dish = res.first['dish'].to_i if dish == nil
    @protect = res.first['protect'].to_i
    sum = res.first['sum']
    sum.split( "\t" ).each do |e|
      t = e.split( ':' )
      @fn = t[0]
      @weight = t[1]
      @unit = t[2]
      @unitv = t[3]
      @check = t[4]
      @init = t[5]
      if t[6] == nil || t[6] == ''
        @rr = 1.0
      elsif t[6].to_f > 1
        @rr = 1.0
      elsif t[6].to_f < 0
        @rr = 0.0
      else
        @rr = t[6]
      end
      @ew = t[7]
    end
  end

  def debug()
    puts "code:#{code}<br>"
    puts "recipe_name:#{recipe_name}<br>"
    puts "dish_num:#{dish_num}<br>"
    puts "protect:#{protect}<br>"
    puts "sum:#{sum}<br>"
    puts "<hr>"
  end

end






class Recipe
  attr_reader :x

  def initialize()
  end
end


class Meal
  attr_reader :x

  def initialize()
  end
end


class Memu
  attr_reader :x

  def initialize()
  end
end
